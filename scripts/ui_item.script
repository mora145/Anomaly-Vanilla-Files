
-- Tronex, Searge
-- 2019/1/23
-- Item name/description translated strings export
-- These functions are called from the engine, you can control the translated strings and the engine will display them back

--=======================================< Colors >=======================================--
local last_n_id = nil
local last_sn_id = nil
local last_d_id = nil
local last_name_id = nil
local last_short_name_id = nil
local last_desc_id = nil

local last_n_sec = nil
local last_sn_sec = nil
local last_d_sec = nil
local last_name_sec = nil
local last_short_name_sec = nil
local last_desc_sec = nil

local sfind = string.find
local mceil = math.ceil
local mfloor = math.floor
local gc = game.translate_string

local clr_g = txr_utils.get_clr("d_green")
local clr_y = txr_utils.get_clr("yellow")
local clr_o = txr_utils.get_clr("d_orange")
local clr_r = txr_utils.get_clr("d_red")

local clr_b = txr_utils.get_clr("d_cyan")
local clr_b1 = txr_utils.get_clr("pda_blue")
local clr_b2 = txr_utils.get_clr("d_blue")
local clr_p = txr_utils.get_clr("d_purple")

local clr_w = txr_utils.get_clr("pda_white")

local clr_1 = txr_utils.get_clr("ui_gray_2")
local clr_2 = txr_utils.get_clr("ui_gray_1")


--=======================================< Strings >=======================================--
local str_prop = gc("st_itm_desc_properties")
local str_details = gc("st_itm_desc_details")
local str_warning = gc("st_itm_desc_warning")

local str_con = gc("st_condition")
local str_uses = gc("st_ui_number_of_uses")

local str_stat_posble_y = gc("st_itm_desc_state_possible")
local str_stat_posble_n = gc("st_itm_desc_state_not_possible")
local str_stat_avail = gc("st_itm_desc_state_avail")
local str_stat_included = gc("st_itm_desc_state_not_included")
local str_stat_low = gc("st_itm_desc_state_low")
local str_stat_average = gc("st_itm_desc_state_average")
local str_stat_high = gc("st_itm_desc_state_high")
local str_stat_slight = gc("st_itm_desc_state_slight")
local str_stat_moderate = gc("st_itm_desc_state_moderate")
local str_stat_significant = gc("st_itm_desc_state_significant")
local str_stat_increase = gc("st_itm_desc_state_increase")
local str_stat_decrease = gc("st_itm_desc_state_decrease")
local str_stat_unknown = gc("st_dyn_news_unknown_contact")

local str_arty_cont = gc("st_itm_desc_arty_cont")
local str_arty_cont_rad = gc("st_itm_desc_arty_cont_rad")

local str_eat_sleepiness = gc("st_itm_desc_eat_sleepiness")
local str_eat_thirstiness = gc("st_itm_desc_eat_thirst")
local str_eat_rad_poison = gc("st_itm_desc_eat_radiation")
local str_eat_health = gc("st_itm_desc_eat_health")

local str_pwr_left = gc("st_ui_power")
local str_pwr_cons = gc("st_ui_power_consumption")

local str_out_upgr = gc("st_itm_desc_outfit_upgradable")
local str_out_helm = gc("st_itm_desc_outfit_heardgear")
local str_out_slots = gc("st_itm_desc_outfit_num_of_slots")
local str_out_cw = gc("st_itm_desc_outfit_carry_weight")
local str_out_run = gc("st_itm_desc_outfit_run")
local str_out_patch = gc("st_itm_desc_outfit_patch_torn")
local str_out_comm = gc("st_itm_desc_outfit_faction")

local str_workshop_tool = gc("st_itm_desc_workshop_tool")
local str_repair_bonus = gc("st_itm_desc_outfit_repair_bonus")
local str_repair_base_con = gc("st_itm_desc_repair_base_con")
local str_repair_min_con = gc("st_itm_desc_repair_min_con")
local str_require_tool = gc("st_itm_desc_outfit_required_tool")
local str_repair_match = gc("st_itm_desc_repair_match")

local str_part_usable = gc("st_itm_desc_part_usable")
local str_part_i = gc("st_itm_desc_part_i")
local str_part_o = gc("st_itm_desc_part_o")
local str_part_w = gc("st_itm_desc_part_w")

local str_upgr_usable = gc("st_itm_desc_upgr_usable")
local str_upgr_o = gc("st_itm_desc_upgr_o")
local str_upgr_w = gc("st_itm_desc_upgr_w")

local str_msv = gc("st_msv")
local str_ah_sec = gc("st_ah_sec")
local str_mah_sec = gc("st_mah_sec")
local str_uah_sec = gc("st_uah_sec")
local str_pah_sec = gc("st_pah_sec")

local str_cap_upgr = {}
str_cap_upgr[1] = gc("st_cap_upgr_1")
str_cap_upgr[2] = gc("st_cap_upgr_2")
str_cap_upgr[3] = gc("st_cap_upgr_3")

local str_cap_meal = {}
str_cap_meal[1] = gc("st_cap_meal_1")
str_cap_meal[2] = gc("st_cap_meal_2")
str_cap_meal[3] = gc("st_cap_meal_3")



--=======================================< Functions >=======================================--
function get_list_highlight()
	return last_d_id
end


function get_sec_name(sec)
	if (sec == last_n_sec) then
		return last_name_sec or ""
	end
	
	local str = gc(ini_sys:r_string_ex(sec,"inv_name")) or ""
	str = build_name_last(nil,sec,str) -- End
	
	last_n_sec = sec
	last_name_sec = str
	return str
end

function get_sec_short_name(sec)
	if (sec == last_sn_sec) then
		return last_short_name_sec or ""
	end
	
	local str = gc(ini_sys:r_string_ex(sec,"inv_name_short")) or ""
	str = build_short_name_first(nil,sec,str) -- End
	
	last_sn_sec = sec
	last_short_name_sec = str
	return str
end

function get_sec_desc(sec)
	if (sec == last_d_sec) then
		return last_desc_sec or ""
	end
	
	local str = gc(ini_sys:r_string_ex(sec,"description")) or ""
	str = build_desc_footer(nil,sec,str) -- Footer
	
	last_d_sec = sec
	last_desc_sec = str
	return str
end


function get_obj_name(obj)
	if obj then
		local sec = obj:section()
		local str = gc(ini_sys:r_string_ex(sec,"inv_name"))
		str = item_name(obj, str)
		return str
	end
	return ""
end

function get_obj_short_name(obj)
	if obj then
		local sec = obj:section()
		local str = gc(ini_sys:r_string_ex(sec,"inv_name_short"))
		str = item_short_name(obj, str)
		return str
	end
	return ""
end

function get_obj_desc(obj)
	if obj then
		local sec = obj:section()
		local str = gc(ini_sys:r_string_ex(sec,"description"))
		str = item_description(obj, str)
		return str
	end
	return ""
end


function build_short_name_first(obj, sec, str) -- no obj used
	str = str or gc(ini_sys:r_string_ex(sec,"inv_name_short"))
	if (not str) then return "" end
	
	local _str = ""
	
	str = _str .. str
	
	return str
end

function build_name_first(obj, sec, str) -- no obj used
	str = str or gc(ini_sys:r_string_ex(sec,"inv_name"))
	if (not str) then return "" end
	
	local _str = ""
	
	str = _str .. str
	
	return str
end

function build_name_last(obj, sec, str) -- no obj used
	str = str or gc(ini_sys:r_string_ex(sec,"inv_name"))
	if (not str) then return "" end
	
	local _str = ""
	
	local meal_tier = itms_manager.is_meal(nil,sec)
	local upgr_tier = itms_manager.is_upgrade(nil,sec)
	
	-- upgrades
	if upgr_tier then
		_str = _str .. " " .. str_cap_upgr[upgr_tier]
		
	-- meals
	elseif meal_tier then
		_str = _str .. " " .. str_cap_meal[meal_tier]
	end
	
	str = str .. _str
	
	return str
end

function build_desc_header(obj, sec, str)  -- obj needed
	str = str or gc(ini_sys:r_string_ex(sec,"description"))
	if (not str) then return "" end
	
	local _str = ""
	
	-- Consumable uses
	if itms_manager.is_multi_use(nil,sec) then
		_str = clr_g .. " • " .. clr_2 .. str_uses .. ": " .. clr_g .. obj:get_remaining_uses() .. "\\n \\n" .. clr_2
		
	-- Device power
	elseif itms_manager.is_device(nil,sec)
	or itms_manager.is_battery(nil,sec)
	then
		local con = mceil(obj:condition() * 100)
		local clr = clr_b1 --(con < 25 and clr_r) or (con < 50 and clr_o) or (con < 75 and clr_y) or clr_b1
		_str = clr .. " • " .. clr_2 .. str_pwr_left .. ": " .. clr .. tostring(con) .. "%" .. "\\n \\n" .. clr_2
		
	-- Condition
	elseif IsWeapon(obj)
	or IsOutfit(obj)
	or IsHeadgear(obj)
	or itms_manager.is_backpack(nil,sec)
	or itms_manager.is_dissasembly(nil,sec)
	then
		local con = mceil(obj:condition() * 100)
		local clr = txr_utils.get_con_clr(con)
		_str = clr .. " • " .. clr_2 .. str_con .. ": " .. clr .. tostring(con) .. "%" .. "\\n \\n" .. clr_2
		
	elseif ini_sys:r_bool_ex(sec,"cond_part") then
		local con = obj:condition()
		con = mfloor(con*100)
		local clr = txr_utils.get_con_clr(con)
		_str = clr .. " • " .. clr_2 .. str_con .. ": " .. clr .. txr_utils.get_con_txt(con, nil, sec) .. "\\n \\n" .. clr_2
	
	-- Contained artefact
	elseif sfind(sec,"af_") then
		if (sfind(sec, "(lead.-_box)",3)) then
			local break_con = "lead_box"
			local break_arty = sec:gsub("_lead_box", "")
			if ini_sys:section_exist(break_arty) then
				_str = clr_o .. " • " .. clr_2 .. str_arty_cont .. ": " .. clr_o .. get_sec_name(break_arty) .. "\\n \\n" .. clr_2
			end
		elseif (sfind(sec, "(af.-_iam)",3)) then
			local break_con = "af_iam"
			local break_arty = sec:gsub("_af_iam", "")
			if ini_sys:section_exist(break_arty) then
				_str = clr_o .. " • " .. clr_2 .. str_arty_cont .. ": " .. clr_o .. get_sec_name(break_arty) .. "\\n \\n" .. clr_2
			end
		elseif (sfind(sec, "(af.-_aac)",3)) then
			local break_con = "af_aac"
			local break_arty = sec:gsub("_af_aac", "")
			if ini_sys:section_exist(break_arty) then
				_str = clr_o .. " • " .. clr_2 .. str_arty_cont .. ": " .. clr_o .. get_sec_name(break_arty) .. "\\n \\n" .. clr_2
			end
		elseif (sfind(sec, "(af.-_aam)",3)) then
			local break_con = "af_aam"
			local break_arty = sec:gsub("_af_aam", "")
			if ini_sys:section_exist(break_arty) then
				_str = clr_o .. " • " .. clr_2 .. str_arty_cont .. ": " .. clr_o .. get_sec_name(break_arty) .. "\\n \\n" .. clr_2
			end
		end
		
	end
	
	-- Patch missing
	if txr_disguise.unpatched_outfit[obj:id()] then
		local comm = ini_sys:r_string_ex(sec,"community")
		if comm and (comm ~= "") then
			local patch_sec = txr_disguise.get_patch(comm,true)
			local patch_name = patch_sec and get_sec_name(patch_sec)
			if patch_name then
				_str = _str .. clr_r .. str_warning .. ": " .. clr_2 .. strformat(str_out_patch, patch_name) .. "\\n \\n" .. clr_2
			end
		end
	end
	
	str = _str .. str
	
	return str
end

function build_desc_footer(obj, sec, str) -- one obj used
	str = str or gc(ini_sys:r_string_ex(sec,"description"))
	if (not str) then return "" end

	local _str = ""
	
	--[[
	if sfind(sec,"af_") then
		if (sfind(sec, "(af.-_iam)",3)) then
			local break_con = "af_iam"
			local rad_out = "12"
			_str = _str .. "%c[0,225,225,225] • " .. clr_1 .. " " .. str_arty_cont_rad .. ": " .. clr2 .. rad_out .. " " .. gc("st_msv") .. " \\n"
		elseif (sfind(sec, "(af.-_aac)",3)) then
			local break_con = "af_aac"
			local rad_out = "24"
			_str = _str .. "%c[0,225,225,225] • " .. clr_1 .. " " .. str_arty_cont_rad .. ": " .. clr2 .. rad_out .. " " .. gc("st_msv") .. " \\n"
		elseif (sfind(sec, "(af.-_aam)",3)) then
			local break_con = "af_aam"
			local rad_out = "36"
			_str = _str .. "%c[0,225,225,225] • " .. clr_1 .. " " .. str_arty_cont_rad .. ": " .. clr2 .. rad_out .. " " .. gc("st_msv") .. " \\n"
		end
	end
	--]]
	
	-- Outfit states
	if IsOutfit(obj) then
		local helmet_avaliable = ini_sys:r_bool_ex(sec,"helmet_avaliable") ~= false
		local artefact_count = ini_sys:r_float_ex(sec,"artefact_count") or 0
		local sprint_allowed = ini_sys:r_bool_ex(sec,"sprint_allowed") ~= false
		local additional_inventory_weight = ini_sys:r_float_ex(sec,"additional_inventory_weight") or 0
		local community = ini_sys:r_string_ex(sec,"community")
		
		_str = _str .. clr_2 .. " " .. str_prop .. ":\\n"
		_str = _str .. clr_y .. "  • " .. clr_1 .. " " .. str_out_comm .. ": " .. clr_2 .. (community and gc("st_dyn_news_comm_" .. community .. "_6") or str_stat_unknown) .. " \\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_out_helm .. ": " .. clr_2 .. (helmet_avaliable and str_stat_included or str_stat_avail) .. " \\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_out_slots .. ": " .. clr_2 .. tostring(artefact_count) .. " \\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_out_cw .. ": " .. clr_2 .. "+" .. tostring(additional_inventory_weight) .. " " .. gc("st_kg") .. " \\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_out_run .. " " .. (sprint_allowed and str_stat_posble_y or str_stat_posble_n) .. " \\n"
	
	-- parts
	elseif itms_manager.is_part(nil,sec) then
		local part_o = sfind(sec,"prt_o") and true or false
		local part_w = sfind(sec,"prt_w") and true or false
		local part_type = (part_o and str_part_o) or (part_w and str_part_w) or (str_part_i)
	
		_str = _str .. clr_2 .. " " .. str_prop .. ":\\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. part_type .. " \\n"
		if part_o or part_w then
			_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_part_usable .. " \\n"
		end
		
	-- upgrades
	elseif itms_manager.is_upgrade(nil,sec) then
		local upgr_o = sfind(sec,"upgr_o") and true or false
		local part_type = upgr_o and str_upgr_o or str_upgr_w
	
		_str = _str .. clr_2 .. " " .. str_prop .. ":\\n"
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. part_type .. " \\n"
		_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_upgr_usable .. " \\n"
	
	-- Backpack (carry weight)
	elseif itms_manager.is_backpack(nil,sec) then
		local additional_inventory_weight = ini_sys:r_float_ex(sec,"additional_inventory_weight") or 0
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_out_cw .. ": " .. clr_2 .. "+" .. tostring(additional_inventory_weight) .. " " .. gc("st_kg") .. " \\n"
		
	-- Consumables (Sleepiness \ Thirstiness)
	elseif itms_manager.is_consumable(nil,sec) then
		local eat_sleepiness = ini_sys:r_float_ex(sec,"eat_sleepiness")
		if eat_sleepiness then
			local num = math.abs(eat_sleepiness) * 1000
			local amount = ((num > 1000) and str_stat_significant) or ((num > 200) and str_stat_moderate) or str_stat_slight
			local sign = (eat_sleepiness > 0 ) and str_stat_increase or str_stat_decrease
			local clr = (eat_sleepiness > 0 ) and clr_r or clr_g
			local str1_eat_sleepiness =  strformat(str_eat_sleepiness, amount, sign)
			_str = _str .. clr .. "  • " .. clr_1 .. " " .. str1_eat_sleepiness .. " \\n"
		end
		
		local eat_thirstiness = ini_sys:r_float_ex(sec,"eat_thirstiness")
		if eat_thirstiness then
			local num = math.abs(eat_thirstiness) * 1000
			local amount = ((num > 1000) and str_stat_significant) or ((num > 200) and str_stat_moderate) or str_stat_slight
			local sign = (eat_thirstiness > 0 ) and str_stat_increase or str_stat_decrease
			local clr = (eat_thirstiness > 0 ) and clr_r or clr_g
			local str1_eat_thirstiness =  strformat(str_eat_thirstiness, amount, sign)
			_str = _str .. clr .. "  • " .. clr_1 .. " " .. str1_eat_thirstiness .. " \\n"
		end
		
		local eat_health = ini_sys:r_float_ex(sec,"eat_health")
		if eat_health and (eat_health < 0) then
			_str = _str .. clr_r .. "  • " .. clr_1 .. " " .. str_eat_health .. " \\n"
		end
		
		local eat_rad = ini_sys:r_float_ex(sec,"eat_radiation")
		if eat_rad and (eat_rad > 0) then
			local num = math.abs(eat_rad) * 10000
			_str = _str .. clr_r .. "  • " .. clr_1 .. " " .. str_eat_rad_poison .. ": " .. clr_2 .. "+" .. mceil(num) .. " " .. str_msv .. " \\n"
		end
	end
	
	-- Power Consumption
	if itms_manager.is_device(nil,sec) then
		local val = itms_manager.is_device(nil,sec)
		local unit = str_ah_sec
		if (val < 1) then
			val = val * 1000
			unit = str_mah_sec
		end
		if (val < 1) then
			val = val * 1000
			unit = str_uah_sec
		end
		if (val < 1) then
			val = val * 1000
			unit = str_pah_sec
		end
		
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. gc("st_ui_power_consumption") .. ": " .. clr_2 .. tostring(val) .. " " .. unit .. " \\n"
	end
	
	-- Repair base condition
	local repair_base = ini_sys:r_float_ex(sec,"repair_add_condition")
	if repair_base then
		_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_repair_base_con .. ": " .. clr_2 .. " +" .. tostring(mceil(repair_base*100)) .. "% \\n"
	end
	
	-- Repair min condition
	local repair_min = ini_sys:r_float_ex(sec,"repair_min_condition")
	if repair_min then
		_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_repair_min_con .. ": " .. clr_2 .. " " .. tostring(mceil(repair_min*100)) .. "% \\n"
	end
	
	-- Repair bonus part
	local repair_bonus = ini_sys:r_float_ex(sec,"repair_part_bonus")
	if repair_bonus then
		_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_repair_bonus .. ": " .. clr_2 .. " +" .. tostring(mceil(repair_bonus*100)) .. "% \\n"
	end
	
	-- Repair match parts
	local is_part_match = ini_sys:r_bool_ex(sec,"repair_parts_match")
	if is_part_match then
		_str = _str .. clr_b .. "  • " .. clr_1 .. " " .. str_repair_match .. " \\n"
	end
	
	-- Workshop tool
	local is_workshop_tool = ini_sys:r_bool_ex(sec,"workshop_tool")
	if is_workshop_tool then
		_str = _str .. clr_p .. "  • " .. clr_1 .. " " .. str_workshop_tool .. " \\n"
	end
	
	-- Required tool
	local required_tool = ini_sys:r_string_ex(sec,"required_tool")
	if required_tool and ini_sys:section_exist(required_tool) then
		local required_tool_name = get_sec_name(required_tool)
		_str = _str .. clr_o .. "  • " .. clr_1 .. " " .. str_require_tool .. ": " .. clr_2 .. " " .. required_tool_name .. " \\n"
	end
	
	
	str = str .. _str .. " \\n"
	
	return str
end


-- Called from Engine!
function item_name(obj, str)
	local id = obj:id()
	local sec = obj:section()
	
	if (last_n_id == id) then
		return last_name_id or ""
	end
	
	--str = build_name_first(obj,sec,str) -- Beginning
	str = build_name_last(obj,sec,str) -- End
	
	last_n_id = id
	last_name_id = str
	
	return str or ""
end

-- Called from Engine!
function item_short_name(obj, str)
	return str or ""
	--[[
	local id = obj:id()
	local sec = obj:section()
	
	if (last_n_id == id) then
		return last_name_id or ""
	end
	
	str = build_short_name_first(obj,sec,str) -- Beginning
	
	last_n_id = id
	last_name_id = str
	
	return str or ""
	--]]
end

-- Called from Engine!
function item_description(obj, str)
	local id = obj:id()
	local sec = obj:section()
	
	if (last_d_id == id) then
		return last_desc_id or ""
	end
	
	str = build_desc_header(obj,sec,str) -- Header
	str = build_desc_footer(obj,sec,str) -- Footer
	
	last_d_id = id
	last_desc_id = str
	
	return str or ""
end


--=======================================< Callbacks >=======================================--
local function on_key_release(key)
	--local bind = dik_to_bind(key)
	
	-- Reset strings on inventory button
	--if (bind == key_bindings.kINVENTORY) then
		last_n_id = nil
		last_d_id = nil
		last_name_id = nil
		last_desc_id = nil
	--end
end

function on_game_start()
	RegisterScriptCallback("on_key_release",on_key_release)
end 