-- ui_loot
-- Alundaio
-- ponney68
--[[
   Copyright (C) 2012 Alundaio

   This program is free software; you can redistribute and/or modify
   it under the terms of the Open S.T.A.L.K.E.R. Mod License version 1.0.
-]]
-- =======================================================================================
-- Modified by Tronex
-- Last modification: 2019/5/25
-- Added Loot all button, organized script, inventory cell system
-- =======================================================================================


local mf,mc,sf,uc
local clr_g,clr_y,clr_o,clr_r,clr_b,clr_b1,clr_b2,clr_p
local bonus_part_chance = 0

local kind_to_section = {
	["SM_KARLIK"] 	 = "karlik",
	["SM_PSYSUCKER"] = "psysucker",
	["SM_LURKER"] 	 = "lurker"
}
	
-- ponney68: This table based on "species" of mutants
local killed_mutant_tbl = {

-- TRX: A-Life Revamp
    psysucker			= {file="ui\\ui_actor_monsters_pda_3",x="393",y="0",type="small"},
   	lurker				= {file="ui\\ui_actor_monsters_pda_3",x="0",y="0",type="small"},
    karlik				= {file="ui\\ui_actor_monsters_pda_3",x="0",y="200",type="small"},

    snork				= {file="ui\\ui_actor_monsters_pda",x="393",y="0",type="small"},
	dog					= {file="ui\\ui_actor_monsters_pda",x="0",y="800",type="small"},
	pseudodog			= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
	psy_dog				= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
	poltergeist			= {file="ui\\ui_actor_monsters_pda",x="0",y="400",type="small"},
	bloodsucker			= {file="ui\\ui_actor_monsters_pda",x="393",y="400",type="human"},
	controller			= {file="ui\\ui_actor_monsters_pda",x="393",y="800",type="human"},
	chimera				= {file="ui\\ui_actor_monsters_pda",x="0",y="600",type="large"},
	tushkano			= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="small"},
	rat					= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="small"},
	flesh				= {file="ui\\ui_actor_monsters_pda",x="393",y="600",type="large"},
	tark				= {file="ui\\ui_actor_monsters_pda_2",x="0",y="0",type="human"},
	rotan				= {file="ui\\ui_actor_monsters_pda",x="0",y="0",type="human"},
	burer				= {file="ui\\ui_actor_monsters_pda_1",x="0",y="0",type="large"},
	boar				= {file="ui\\ui_actor_monsters_pda_1",x="393",y="0",type="large"},
	giant				= {file="ui\\ui_actor_monsters_pda_1",x="0",y="200",type="large"},
	cat					= {file="ui\\ui_actor_monsters_pda_2",x="0",y="0",type="small"},
	fracture			= {file="ui\\ui_actor_monsters_pda_2",x="393",y="200",type="human"},
	bird				= {file="ui\\ui_actor_monsters_pda_2",x="393",y="0",type="small"},
	zombie				= {file="ui\\ui_actor_monsters_pda_2",x="0",y="200",type="human"},
	bloodsucker_arena	= {file="ui\\ui_actor_monsters_pda",x="393",y="400",type="human"},
	burer_arena			= {file="ui\\ui_actor_monsters_pda_1",x="0",y="0",type="large"},
	pseudodog_arena		= {file="ui\\ui_actor_monsters_pda",x="393",y="200",type="small"},
	snork_arena			= {file="ui\\ui_actor_monsters_pda",x="393",y="0",type="human"},
}

--=======================================< Mutant Loot UI >=======================================--
class "loot_ui" (CUIScriptWnd)

function loot_ui:__init(owner,obj,for_bug1,for_bug2) super()
	self.owner = owner
	
	-- Reload settings
	mf = math.floor
	mc = math.ceil
	sf = string.find
	uc = utils.clamp
	clr_g = txr_utils.get_clr("d_green")
	clr_y = txr_utils.get_clr("yellow")
	clr_o = txr_utils.get_clr("d_orange")
	clr_r = txr_utils.get_clr("d_red")
	clr_b = txr_utils.get_clr("d_cyan")
	clr_b1 = txr_utils.get_clr("pda_blue")
	clr_b2 = txr_utils.get_clr("d_blue")
	clr_p = txr_utils.get_clr("d_purple")
	bonus_part_chance = ini_sys:r_float_ex("kit_hunt","bonus_mutant_part_chance") or 0
	
	self.inv = {}
	
	local function is_number(var)
		local function lets_try(var)
			var = tonumber(var)
			return (var > 0) or (var < 0) or var or -var
		end
		if pcall(function() lets_try(var) end) then
			return true
		else
			return false
		end
	end

	if not (is_number(obj)) then 
		self.section = obj:section()	
		self.clsid = obj:clsid()
		self.id = obj:id()
		self.obj = obj
	else 	
		self.id = obj		
		self.section=for_bug1
		self.clsid = for_bug2
		self.obj = nil		
	end

	self:InitControls()
	self:InitCallBacks()
	
	self:FillList()
end

function loot_ui:__finalize()
end

function loot_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)

	self.xml				= CScriptXmlInit()
	self.xml:ParseFile			("ui_mutant_loot.xml")
	local xml = self.xml
	
	self.dialog				= xml:InitStatic("mutant_loot:background",self)

	-- Mutant image
	self:SetMutantImage()

	-- Inv
	self.frame 			= xml:InitStatic("mutant_loot:frame",self.dialog)
	self.scroll_inv = xml:InitScrollView("mutant_loot:scrollbar_inv", self.dialog)

	-- Button Loot one
	self.btn_loot_one = xml:Init3tButton("mutant_loot:btn_loot",self.dialog)
	self:Register(self.btn_loot_one, "button_loot")
	
	-- Button Loot all
	self.btn_loot_all = xml:Init3tButton("mutant_loot:btn_loot_all",self.dialog)
	self:Register(self.btn_loot_all, "button_loot_all")
	
	-- Button Cancel
	self.btn_cancel = xml:Init3tButton("mutant_loot:btn_cancel",self.dialog)
	self:Register(self.btn_cancel, "button_cancel")
	
	-- Hint Window
	self.hint_wnd = xml:InitFrame("hint_wnd:background",self)
	self.hint_wnd:SetAutoDelete(false)
	self.hint_wnd_text = xml:InitTextWnd("hint_wnd:text",self.hint_wnd)
	self.hint_wnd:Show(false)
	
	-- Message Window 
	self.msg_wnd = xml:InitFrame("hint_wnd:background",self)
	self.msg_wnd:SetAutoDelete(false)
	self.msg_wnd_text = xml:InitTextWnd("hint_wnd:text",self.msg_wnd)
	self.msg_wnd_text:SetTextAlignment(2)
	
	self.msg_wnd:Show(false)
	self.msg_wnd:SetColor(GetARGB(255,0,0,0))
	
end

function loot_ui:InitCallBacks()
	self:AddCallback("button_loot",ui_events.BUTTON_CLICKED,self.OnButton_LootSelected,self)
	self:AddCallback("button_loot_all",ui_events.BUTTON_CLICKED,self.OnButton_LootAll,self)
	self:AddCallback("button_cancel",ui_events.BUTTON_CLICKED,self.OnButton_Cancel,self)
end

function loot_ui:Update()
	CUIScriptWnd.Update(self)
	
	-- Warning messages timer 
	if (self.msg_wnd_timer and time_global() > self.msg_wnd_timer) then 
		self.msg_wnd_timer = nil
		self.msg_wnd:Show(false)
	end
	
	for k1,v1 in pairs(self.inv) do
		if (v1.btn and v1.btn:IsCursorOverWindow()) then
			local name = ui_item.get_sec_name(v1.sec)
			local desc = ui_item.get_sec_desc(v1.sec)
			local str = "%c[0,200,200,200]" .. name .. "\\n \\n%c[0,140,140,140]" .. desc
			self:SetHint(str)
			return
		end
	end
	
	self.hint_wnd:Show(false)
end 

function loot_ui:SetMsg(text,tmr)
	if (text == "") then 
		return 
	end
	self.msg_wnd:Show(true)
	self.msg_wnd_text:SetText(text)
	self.msg_wnd_text:AdjustHeightToText()
	self.msg_wnd_text:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+10))
	self.msg_wnd_text:SetWndPos(vector2():set(0,20))
	
	self.msg_wnd:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+44))
	self.msg_wnd:SetWndPos(vector2():set(0,80))

	self.msg_wnd_timer = time_global() + 1000*tmr
end

function loot_ui:SetHint(text,pos)
	if (text == "") then
		return
	end
	self.hint_wnd:Show(true)
	self.hint_wnd_text:SetText(text)
	self.hint_wnd_text:AdjustHeightToText()
	self.hint_wnd:SetWndSize(vector2():set(self.hint_wnd:GetWidth(),self.hint_wnd_text:GetHeight()+44))
	
	pos = pos or GetCursorPosition()
	pos.y = pos.y - self.hint_wnd:GetHeight()
	pos.x = pos.x - self.hint_wnd:GetWidth()
	self.hint_wnd:SetWndPos(pos)
	
	FitInRect(self.hint_wnd,Frect():set(0,0,1024,768),0,100)
end


---------------< Callbacks >---------------
function loot_ui:OnButton_LootSelected()
	local is_looted
	local sim = alife()
	for k1,v1 in pairs(self.inv) do
		if v1.btn:GetCheck() then
			is_looted = true
			knife_manager.degradate()
			
			sim:create(v1.sec, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID)
			if is_huntkit and (math.random(100) < bonus_part_chance) then
				txr_utils.create_inv_obj(v1.sec)
			end
			
			self.loot[v1.sec].count = self.loot[v1.sec].count - 1
			if self.loot[v1.sec].count == 0 then
				self.loot[v1.sec] = nil
			end
		end
	end
	if (not is_looted) then
		return
	end
	
	local backpack = db.actor:item_in_slot(13)
	local is_huntkit
	if backpack and backpack:section() == "kit_hunt" then
		is_huntkit = true
	end
	
	
	if (txr_actor_effects) then
		local boost = (dxr_achievements.has_achievement("well_dressed") and 1 or 0) + (is_huntkit and 1 or 0)
		if (boost == 2) then
			txr_actor_effects.play_item_fx("mutant_looting_boost_2")
		elseif (boost == 1) then
			txr_actor_effects.play_item_fx("mutant_looting_boost_1")
		else
			txr_actor_effects.play_item_fx("mutant_looting")
		end
	end
	xr_sound.set_sound_play(AC_ID,"inv_mutant_loot_animal")

	utils.save_var(self.obj,"loot",self.loot)
	dxr_statistics.increment_statistic("field_dressings")
	
	local is_more_loot = not is_empty(self.loot)

	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
	if ((not txr_actor_effects.is_animations_on()) and is_more_loot) then
		self:FillList()
	else
		self:HideDialog()
	end
end

function loot_ui:OnButton_LootAll()
	local backpack = db.actor:item_in_slot(13)
	local is_huntkit
	if backpack and backpack:section() == "kit_hunt" then
		is_huntkit = true
	end
	local tbl = self.loot -- temp
	for sec,t in pairs(tbl) do
		for i=1,t.count do
			knife_manager.degradate()
			alife():create(sec, npc and npc:position() or db.actor:position(), 0, 0, npc and npc:id() or AC_ID)
			if is_huntkit and (math.random(100) < bonus_part_chance) then
				txr_utils.create_inv_obj(sec)
			end
			self.loot[sec].count = self.loot[sec].count - 1
			if (self.loot[sec].count == 0) then
				self.loot[sec] = nil
			end
		
			utils.save_var(self.obj,"loot",self.loot)
			dxr_statistics.increment_statistic("field_dressings")
		end
	end
	
	if (txr_actor_effects) then
		local boost = (dxr_achievements.has_achievement("well_dressed") and 1 or 0) + (is_huntkit and 1 or 0)
		if (boost == 2) then
			txr_actor_effects.play_item_fx("mutant_looting_boost_2")
		elseif (boost == 1) then
			txr_actor_effects.play_item_fx("mutant_looting_boost_1")
		else
			txr_actor_effects.play_item_fx("mutant_looting")
		end
	end
	xr_sound.set_sound_play(AC_ID,"inv_mutant_loot_animal")
	
	local is_more_loot = not is_empty(self.loot)

	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
	if ((not txr_actor_effects.is_animations_on()) and is_more_loot) then
		self:FillList()
	else
		self:HideDialog()
	end
end

function loot_ui:OnButton_Cancel()
	local is_more_loot = not is_empty(self.loot)
	
	if is_more_loot then
		--utils.save_var(self.obj,"looted",false)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",false)
		xr_corpse_detection.set_valuable_loot(self.id,true)
	else
		--utils.save_var(self.obj,"looted",true)
		utils.se_obj_save_var(self.obj:id(),self.obj:name(),"looted",true)
		xr_corpse_detection.set_valuable_loot(self.id,false)
	end
		
	self:HideDialog()	
end

function loot_ui:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_ESCAPE) then 
			self:OnButton_Cancel()
		end
	end
	return true
end


---------------< Utility >---------------
function loot_ui:SetMutantImage()
	local mutant_id = game.translate_string(ini_sys:r_string_ex(self.section,"species") or "")
	
	local kind = ini_sys:r_string_ex(self.section,"kind") or "unknown"
	mutant_id = kind_to_section[kind] or mutant_id
	
	--printf("-MUTANT:"..mutant_id)

	local mutant_f = "ui\\ui_actor_monsters_pda_1"
	local mutant_x = 0
	local mutant_y = 0

	mutant_f = tostring(killed_mutant_tbl[mutant_id].file)
	mutant_x = tostring(killed_mutant_tbl[mutant_id].x)
	mutant_y = tostring(killed_mutant_tbl[mutant_id].y)

	local x1 = mutant_x
	local y1 = mutant_y
	local mutant_width = 393
	local mutant_height = 200

	local x2 = x1 + mutant_width
	local y2 = y1 + mutant_height

	self.image			= self.xml:InitStatic("mutant_loot:image",self.dialog)
	self.image:InitTexture(tostring(mutant_f))
	self.image:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.image:SetStretchTexture(true)
end

function loot_ui:FillList()
	self.scroll_inv:Clear()

	--developed by Dimeyne, copied by Wafel
	self.loot = utils.load_var(self.obj,"loot",nil)
	if not self.loot then
		self.loot = {}
		itms_manager.loot_mutant(self.section,self.clsid,self.loot,nil,true)
		utils.save_var(self.obj,"loot",self.loot)
	end
	
	local is_there_loot
	local inv = {}
	for sec,t in pairs(self.loot) do
		for i=1,t.count do
			inv[#inv + 1] = sec
		end
		is_there_loot = true
	end
	if utils.load_var(self.obj,"looted",nil) then
		is_there_loot = false
	end

	if is_there_loot then
		self:ShowDialog(true)
		self:InitInventory(inv)
	else
		local hud = get_hud()
		if (hud) then
			hud:AddCustomStatic("can_use_weapon_now", true)
			hud:GetCustomStatic("can_use_weapon_now"):wnd():TextControl():SetTextST("st_body_useless")
		end
		itms_manager.ShowMessage = true
		itms_manager.ShowMessageInit = game.get_game_time()
		itms_manager.ShowMessageTime = 20
	end
end

function loot_ui:InitInventory(tbl)
	local xml = self.xml

	local inv = {}
	for i=1,#tbl do
		local w = ini_sys:r_float_ex(tbl[i],"inv_grid_width")
		local h = ini_sys:r_float_ex(tbl[i],"inv_grid_height")
		inv[i] = { sec = tbl[i] , w = w , h = h }
	end

	local function count_grids_num(t)
		local cnt = 0
		for _,v in pairs(t) do
			cnt = cnt + (v.w * v.h)
		end
		return cnt
	end
	
	empty_table(self.inv)
	self.scroll_inv:Clear()
	local _st = xml:InitStatic("mutant_loot:inv_form", nil)
	
	local grid = xml:InitStatic("inv_grid", nil)
	local grid_w = grid:GetWidth()
	local grid_h = grid:GetHeight()
	local tot_grid_w = math.floor(_st:GetWidth() / grid_w)
	local tot_grid_h = math.floor(_st:GetHeight() / grid_h)
	local tot_grid_num = math.max( count_grids_num(inv) , (tot_grid_w * tot_grid_h))
	local tot_grid_ind = {}
	for i=1,tot_grid_num do
		local row = mc(i/tot_grid_w)
		tot_grid_ind[row] = tot_grid_ind[row] or {}
		tot_grid_ind[row][#tot_grid_ind[row] + 1] = true
	end

	for k,v in pairs(inv) do
		self.inv[k] = {}
		self.inv[k].ico_tmp = xml:InitStatic("inv_grid", _st)
		self.inv[k].btn = xml:InitCheck("inv_btn_" .. tostring(v.w) .. "_" .. tostring(v.h), _st)
		self.inv[k].ico = xml:InitStatic("inv_grid", _st)
		self.inv[k].ico_s = xml:InitStatic("inv_grid", _st)
		self.inv[k].sec = v.sec
		
		tot_grid_h = txr_utils.set_grid_element(
			{ id = k , sec = v.sec , g_w = grid_w , g_h = grid_h , w = v.w , h = v.h , g_row = tot_grid_w },
			tot_grid_ind,
			self.inv[k].btn, self.inv[k].ico, self.inv[k].ico_tmp
		)
		txr_utils.set_up_icon(v.sec, nil, self.inv[k].ico_tmp, self.inv[k].ico, self.inv[k].ico_s)
	end
	
	_st:SetWndSize(vector2():set(_st:GetWidth(),tot_grid_h * grid_h))
	self.scroll_inv:AddWindow(_st, true)
end